version: '3.8'

services:
  # API Gateway - FastAPI Application
  api-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile.api
    container_name: mcp-rag-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:rag_password@postgres:5432/mcp_rag_db
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin123
      - JWT_SECRET_KEY=your-super-secure-jwt-secret-key-here
      - MCP_PROTOCOL_VERSION=1.0
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - mcp-rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MCP Protocol Server
  mcp-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.mcp
    container_name: mcp-rag-mcp-server
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:rag_password@postgres:5432/mcp_rag_db
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - MCP_PROTOCOL_VERSION=1.0
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - mcp-rag-network

  # RAG Engine - Document Processing and Search
  rag-engine:
    build:
      context: ./backend
      dockerfile: Dockerfile.rag
    container_name: mcp-rag-engine
    environment:
      - DATABASE_URL=postgresql://postgres:rag_password@postgres:5432/mcp_rag_db
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin123
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - mcp-rag-network

  # Sync Service - CRDT Synchronization
  sync-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.sync
    container_name: mcp-rag-sync
    environment:
      - DATABASE_URL=postgresql://postgres:rag_password@postgres:5432/mcp_rag_db
      - REDIS_URL=redis://redis:6379/1
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mcp-rag-network

  # Accessibility Service
  accessibility-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.accessibility
    container_name: mcp-rag-accessibility
    environment:
      - DATABASE_URL=postgresql://postgres:rag_password@postgres:5432/mcp_rag_db
      - REDIS_URL=redis://redis:6379/2
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mcp-rag-network

  # Frontend - React PWA
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mcp-rag-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - REACT_APP_MCP_URL=http://localhost:8001
      - REACT_APP_ENVIRONMENT=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - mcp-rag-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mcp-rag-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mcp_rag_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=rag_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - mcp-rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mcp_rag_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: mcp-rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - mcp-rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.3
    container_name: mcp-rag-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - mcp-rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MinIO Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: mcp-rag-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - mcp-rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mcp-rag-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-rag-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=rag_admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - mcp-rag-network

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: mcp-rag-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - mcp-rag-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mcp-rag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - frontend
    networks:
      - mcp-rag-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mcp-rag-network:
    driver: bridge