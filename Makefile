# MCP RAG Server - Development Makefile
# Generated by BMad Development Swarm

.PHONY: help install build up down dev logs clean test lint format

# Default target
help: ## Show this help message
	@echo "MCP RAG Server Development Commands"
	@echo "====================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

# Development Environment
install: ## Install dependencies for both frontend and backend
	@echo "Installing backend dependencies..."
	cd backend && pip install -r requirements/dev.txt
	@echo "Installing frontend dependencies..."
	cd frontend && npm install
	@echo "Dependencies installed successfully!"

build: ## Build all Docker containers
	docker-compose build

up: ## Start all services in detached mode
	docker-compose up -d

down: ## Stop all services
	docker-compose down

dev: ## Start development environment with hot reload
	docker-compose -f docker-compose.yml -f docker-compose.override.yml up

logs: ## Show logs for all services
	docker-compose logs -f

# Development Tools
test: ## Run all tests
	@echo "Running backend tests..."
	cd backend && python -m pytest
	@echo "Running frontend tests..."
	cd frontend && npm test

test-backend: ## Run backend tests only
	cd backend && python -m pytest

test-frontend: ## Run frontend tests only
	cd frontend && npm test

lint: ## Run linting for both frontend and backend
	@echo "Linting backend..."
	cd backend && python -m black --check . && python -m mypy .
	@echo "Linting frontend..."
	cd frontend && npm run lint

lint-fix: ## Fix linting issues
	@echo "Fixing backend linting..."
	cd backend && python -m black .
	@echo "Fixing frontend linting..."
	cd frontend && npm run lint:fix

format: ## Format code
	@echo "Formatting backend code..."
	cd backend && python -m black .
	@echo "Formatting frontend code..."
	cd frontend && npm run format

# Maintenance
clean: ## Clean up containers, volumes, and images
	docker-compose down -v --remove-orphans
	docker system prune -f

clean-all: ## Clean up everything including images
	docker-compose down -v --remove-orphans
	docker system prune -af

# Database Operations
db-migrate: ## Run database migrations
	docker-compose exec api-gateway alembic upgrade head

db-reset: ## Reset database (WARNING: This will delete all data)
	docker-compose down postgres
	docker volume rm $$(docker volume ls -q | grep postgres) || true
	docker-compose up -d postgres

# Health Checks
health: ## Check health of all services
	@echo "Checking service health..."
	@docker-compose ps
	@echo "API Gateway health:"
	@curl -s http://localhost:8000/health || echo "API Gateway not responding"
	@echo "Frontend health:"
	@curl -s http://localhost:3000 >/dev/null && echo "Frontend: OK" || echo "Frontend: Not responding"

# Production
prod-build: ## Build production images
	docker-compose -f docker-compose.prod.yml build

prod-up: ## Start production environment
	docker-compose -f docker-compose.prod.yml up -d

# Monitoring
monitor: ## Show service resource usage
	docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"